// Code generated by mockery v2.43.0. DO NOT EDIT.

package driven

import (
	context "context"
	domain "mynewgoproject/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockLight is an autogenerated mock type for the Light type
type MockLight struct {
	mock.Mock
}

type MockLight_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLight) EXPECT() *MockLight_Expecter {
	return &MockLight_Expecter{mock: &_m.Mock}
}

// ChangeColor provides a mock function with given fields: ctx, color
func (_m *MockLight) ChangeColor(ctx context.Context, color *domain.Color) error {
	ret := _m.Called(ctx, color)

	if len(ret) == 0 {
		panic("no return value specified for ChangeColor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Color) error); ok {
		r0 = rf(ctx, color)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLight_ChangeColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeColor'
type MockLight_ChangeColor_Call struct {
	*mock.Call
}

// ChangeColor is a helper method to define mock.On call
//   - ctx context.Context
//   - color *domain.Color
func (_e *MockLight_Expecter) ChangeColor(ctx interface{}, color interface{}) *MockLight_ChangeColor_Call {
	return &MockLight_ChangeColor_Call{Call: _e.mock.On("ChangeColor", ctx, color)}
}

func (_c *MockLight_ChangeColor_Call) Run(run func(ctx context.Context, color *domain.Color)) *MockLight_ChangeColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Color))
	})
	return _c
}

func (_c *MockLight_ChangeColor_Call) Return(_a0 error) *MockLight_ChangeColor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLight_ChangeColor_Call) RunAndReturn(run func(context.Context, *domain.Color) error) *MockLight_ChangeColor_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeWhite provides a mock function with given fields: ctx, white
func (_m *MockLight) ChangeWhite(ctx context.Context, white *domain.White) error {
	ret := _m.Called(ctx, white)

	if len(ret) == 0 {
		panic("no return value specified for ChangeWhite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.White) error); ok {
		r0 = rf(ctx, white)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLight_ChangeWhite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeWhite'
type MockLight_ChangeWhite_Call struct {
	*mock.Call
}

// ChangeWhite is a helper method to define mock.On call
//   - ctx context.Context
//   - white *domain.White
func (_e *MockLight_Expecter) ChangeWhite(ctx interface{}, white interface{}) *MockLight_ChangeWhite_Call {
	return &MockLight_ChangeWhite_Call{Call: _e.mock.On("ChangeWhite", ctx, white)}
}

func (_c *MockLight_ChangeWhite_Call) Run(run func(ctx context.Context, white *domain.White)) *MockLight_ChangeWhite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.White))
	})
	return _c
}

func (_c *MockLight_ChangeWhite_Call) Return(_a0 error) *MockLight_ChangeWhite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLight_ChangeWhite_Call) RunAndReturn(run func(context.Context, *domain.White) error) *MockLight_ChangeWhite_Call {
	_c.Call.Return(run)
	return _c
}

// SwitchOff provides a mock function with given fields: ctx
func (_m *MockLight) SwitchOff(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SwitchOff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLight_SwitchOff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwitchOff'
type MockLight_SwitchOff_Call struct {
	*mock.Call
}

// SwitchOff is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLight_Expecter) SwitchOff(ctx interface{}) *MockLight_SwitchOff_Call {
	return &MockLight_SwitchOff_Call{Call: _e.mock.On("SwitchOff", ctx)}
}

func (_c *MockLight_SwitchOff_Call) Run(run func(ctx context.Context)) *MockLight_SwitchOff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLight_SwitchOff_Call) Return(_a0 error) *MockLight_SwitchOff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLight_SwitchOff_Call) RunAndReturn(run func(context.Context) error) *MockLight_SwitchOff_Call {
	_c.Call.Return(run)
	return _c
}

// SwitchOn provides a mock function with given fields: ctx
func (_m *MockLight) SwitchOn(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SwitchOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLight_SwitchOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwitchOn'
type MockLight_SwitchOn_Call struct {
	*mock.Call
}

// SwitchOn is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLight_Expecter) SwitchOn(ctx interface{}) *MockLight_SwitchOn_Call {
	return &MockLight_SwitchOn_Call{Call: _e.mock.On("SwitchOn", ctx)}
}

func (_c *MockLight_SwitchOn_Call) Run(run func(ctx context.Context)) *MockLight_SwitchOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLight_SwitchOn_Call) Return(_a0 error) *MockLight_SwitchOn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLight_SwitchOn_Call) RunAndReturn(run func(context.Context) error) *MockLight_SwitchOn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLight creates a new instance of MockLight. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLight(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLight {
	mock := &MockLight{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
